pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '660334028312'
        AWS_DEFAULT_REGION = 'ap-south-1'
        IMAGE_REPO_NAME = 'pos'
        IMAGE_TAG = "${BUILD_NUMBER}"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        DOCKER_CREDENTIALS_ID = 'aws-ecr-credentials' // Jenkins credentials ID for AWS
        GIT_CREDENTIALS_ID = 'github-credentials' // Jenkins credentials ID for GitHub
        GIT_REPO_URL = 'https://github.com/vinaykaushik5555/pos-ecommerce'
        GIT_BRANCH = 'main'
        MAVEN_TOOL = 'Maven3' // Ensure this matches the Maven installation name in Jenkins
    }
    tools {
        maven "${MAVEN_TOOL}"
    }
    stages {
        stage('Cloning Git Repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        url: "${GIT_REPO_URL}",
                        credentialsId: "${GIT_CREDENTIALS_ID}"
                    ]]
                ])
            }
        }
        stage('Building Maven Project') {
            steps {
                dir('user-management-service') {
                    sh 'mvn clean install'
                }
            }
        }
        stage('Building Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${REPOSITORY_URI}:${IMAGE_TAG}")
                }
            }
        }
        stage('Pushing Docker Image to ECR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                            docker push ${REPOSITORY_URI}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }
        stage('Deploying with Helm') {
            steps {
                script {
                    sh '''
                        helm upgrade --install pos-application ./helm-chart-directory \
                        --namespace helm-deployment \
                        --set image.repository=${REPOSITORY_URI} \
                        --set image.tag=${IMAGE_TAG} \
                        --set image.pullPolicy=Always
                    '''
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline execution failed.'
        }
    }
}
