openapi: 3.0.3
info:
  title: User Management Service API
  description: API for managing users, authentication, and profiles.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local server

paths:
  /users/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Users
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '409':
          description: User already exists

  /users/login:
    post:
      summary: Authenticate a user
      operationId: loginUser
      tags:
        - Users
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed

  /users/{userId}:
    get:
      summary: Get user profile
      operationId: getUserProfile
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

    put:
      summary: Update user profile
      operationId: updateUserProfile
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User profile details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

  /users/{userId}/roles:
    put:
      summary: Assign roles to user
      operationId: assignUserRoles
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User roles details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRolesRequest'
      responses:
        '200':
          description: User roles assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

  /users/{userId}/addresses:
    post:
      summary: Add a new address for a user
      operationId: addUserAddress
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Address details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '201':
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
        '404':
          description: User not found

    get:
      summary: Get addresses for a user
      operationId: getUserAddresses
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Addresses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
        '404':
          description: User not found

    put:
      summary: Update an address for a user
      operationId: updateUserAddress
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: addressId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        description: Address details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
        '404':
          description: User or Address not found

    delete:
      summary: Delete an address for a user
      operationId: deleteUserAddress
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: addressId
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Address deleted successfully
        '404':
          description: User or Address not found

components:
  schemas:
    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
      required:
        - email
        - password
        - firstName
        - lastName

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        profilePic:
          type: string
        roles:
          type: array
          items:
            type: string

    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
          format: password

    AssignRolesRequest:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
      required:
        - roles

    AddressRequest:
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
      required:
        - addressLine1
        - city
        - state
        - postalCode
        - country

    AddressResponse:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
